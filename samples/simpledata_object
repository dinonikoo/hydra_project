{-# LANGUAGE OverloadedStrings #-}

module Hydra.Sources.UserModel where

-- Standard type-level Tier-1 imports
import           Hydra.Dsl.Annotations
import           Hydra.Dsl.Bootstrap
import qualified Hydra.Dsl.Terms       as Terms
import           Hydra.Dsl.Types       as Types
import           Hydra.Sources.Tier0.Core
import qualified Data.List             as L
import qualified Data.Map              as M
import qualified Data.Set              as S
import qualified Data.Maybe            as Y
import qualified Hydra.Dsl.TTypes as T
import           Hydra.Dsl.TTerms as TTerms
import qualified Hydra.Dsl.Lib.Equality  as Equality
import qualified Hydra.Dsl.Lib.Io        as Io
import qualified Hydra.Dsl.Lib.Lists     as Lists
import qualified Hydra.Dsl.Lib.Literals  as Literals
import qualified Hydra.Dsl.Lib.Logic     as Logic
import qualified Hydra.Dsl.Lib.Maps      as Maps
import qualified Hydra.Dsl.Lib.Math      as Math
import qualified Hydra.Dsl.Lib.Optionals as Optionals
import qualified Hydra.Dsl.Lib.Sets      as Sets
import           Hydra.Dsl.Lib.Strings   as Strings
import qualified Hydra.Dsl.Base          as Base
import qualified Hydra.Dsl.Core          as Core
import qualified Hydra.Dsl.Graph         as Graph
import qualified Hydra.Dsl.Module        as Module

import           Hydra.Sources.Tier2.All
import           Prelude hiding ((++))

import Hydra.Sources.Tier1.Mantle


testGraphDefinition :: String -> TTerm a -> TElement a
testGraphDefinition = definitionInModule mytestGraphModule

mytestGraphModule :: Module
mytestGraphModule = Module ns elements [hydraCoreModule] [hydraCoreModule] $
    Just "This is a sample for creating some code"
  where
    ns = Namespace "hydra.testing"
    def = datatype ns
    core = typeref $ moduleNamespace hydraCoreModule
    testing = typeref ns

    elements = [
      --el myTypeNameDef,
      --el myTypeDef,
      el myInstanceDef
      ]

testGraphType :: String -> TTerm Type -> TElement Type
testGraphType name = testGraphDefinition name . firstClassType

myTypeNameDef :: TElement Name
myTypeNameDef = testGraphDefinition "myTypeName" $
  name "MyType"

myTypeDef :: TElement Type
myTypeDef = testGraphType "myType" $
  T.record (ref myTypeNameDef) [
    "field1" T.>: T.string,
    "field2" T.>: T.int32
  ]

myInstanceDef :: TElement Term
myInstanceDef = testGraphDefinition "myInstance" $
  TTerms.record (ref myTypeNameDef) [
    "field1" TTerms.>: TTerms.string "value",
    "field2" TTerms.>: TTerms.int32 42
  ]
